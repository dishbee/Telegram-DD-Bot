
> async def handle_test_smoothr_command(chat_id: int, command: str, message_id: int):
      """
      Handle /test_smoothr command to send simulated Smoothr orders.
      
      Command formats:
      - /test_smoothr dnd          ÔåÆ D&D App order (ASAP: No, with time)
      - /test_smoothr dnd_asap     ÔåÆ D&D App order (ASAP: Yes)
      - /test_smoothr lieferando   ÔåÆ Lieferando order (ASAP: No, with time)
      - /test_smoothr lieferando_asap ÔåÆ Lieferando order (ASAP: Yes)
      - /test_smoothr (no args)    ÔåÆ Random type
      
      Generates random customer data, address, phone, email, and order time.
      """
      import random
      from datetime import timedelta
      
      # Delete the command message
      await safe_delete_message(chat_id, message_id)
      
      # Parse command
      parts = command.split()
      if len(parts) == 1:
          # Random type
          order_type = random.choice(["dnd", "dnd_asap", "lieferando", "lieferando_asap"])
      else:
          order_type = parts[1].lower()
      
      # Determine ASAP and order source
      is_asap = "asap" in order_type
      is_lieferando = "lieferando" in order_type
      
      # Random order code
      if is_lieferando:
          # Lieferando: alphanumeric (e.g., 3DX8TD, 4AF2BC)
          order_code = ''.join(random.choices('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', 
k=6))
      else:
          # D&D App: 500-series (e.g., 500, 5001, 5042)
          order_code = str(random.randint(500, 599))
      
      # Random customer data
      first_names = ["Max", "Anna", "Thomas", "Julia", "Michael", "Sarah", "Peter", 
"Lisa", "David", "Maria"]
      last_names = ["M├╝ller", "Schmidt", "Schneider", "Fischer", "Weber", "Meyer", 
"Wagner", "Becker", "Schulz", "Hoffmann"]
      customer_name = f"{random.choice(first_names)} {random.choice(last_names)}"
      
      # Random Passau addresses
      streets = [
          "Ludwigstra├ƒe 15",
          "Innstra├ƒe 28",
          "Domplatz 5",
          "Neuburger Stra├ƒe 110",
          "Spitalhofstra├ƒe 94",
          "Theresienstra├ƒe 32",
          "Nikolastra├ƒe 7",
          "Grabengasse 12",
          "Lederergasse 8",
          "Dr.-Hans-Kapfinger-Stra├ƒe 20"
      ]
      street = random.choice(streets)
      zip_code = "94032"
      city = "Passau"
      country = "Germany"
      
      # Random phone (German mobile format)
      phone = f"+49 {random.randint(150, 179)} {random.randint(1000000, 9999999)}"
      
      # Random email
      email_domains = ["gmail.com", "web.de", "gmx.de", "outlook.com", "yahoo.de"]
      email = f"{customer_name.split()[0].lower()}.{customer_name.split()[1].lower()}@{ran
dom.choice(email_domains)}"
      
      # Generate order time (UTC)
      current_time = now()
      if is_asap:
          # For ASAP orders, just use current time
          order_time_utc = current_time.replace(tzinfo=None)
      else:
          # For scheduled orders, add random time between 30-120 minutes from now
          minutes_ahead = random.randint(30, 120)
          order_time_local = current_time + timedelta(minutes=minutes_ahead)
          # Convert back to UTC (subtract 2 hours - inverse of what parser will do)
          order_time_utc = order_time_local - timedelta(hours=2)
      
      # Format as ISO string (Smoothr format)
      order_date_iso = order_time_utc.strftime("%Y-%m-%dT%H:%M:%S.000Z")
      
      # Build Smoothr message
      smoothr_message = f"""- Order: {order_code}
  - Type: delivery
  - Customer: {customer_name}
  - Address: {street}
  {zip_code} {city}
  {country}
  - Phone: {phone}
  - Email: {email}
  - ASAP: {"Yes" if is_asap else "No"}
  - Order Date: {order_date_iso}"""
      
      # Log test order info
      source_name = "Lieferando" if is_lieferando else "D&D App"
      asap_status = "ASAP: Yes" if is_asap else f"ASAP: No (Time: 
{order_time_local.strftime('%H:%M') if not is_asap else 'N/A'})"
      logger.info(f"­ƒº¬ TEST SMOOTHR ORDER GENERATED:")
      logger.info(f"   Source: {source_name}")
      logger.info(f"   Code: {order_code}")
      logger.info(f"   Customer: {customer_name}")
      logger.info(f"   {asap_status}")
      
      # Parse the test message and process directly (bot messages don't trigger webhooks)
      from utils import parse_smoothr_order
      smoothr_data = parse_smoothr_order(smoothr_message)
      
      logger.info(f"Ô£à Test Smoothr order parsed: {smoothr_data['order_id']} 
({smoothr_data['order_type']})")
      
      # Process the Smoothr order (sends MDG-ORD + RG-SUM)
      await process_smoothr_order(smoothr_data)
  
  
  # =============================================================================
  # SMOOTHR ORDER PROCESSING
  # =============================================================================
  
  async def process_smoothr_order(smoothr_data: dict):
      """
      Process Smoothr order: Create STATE entry and send formatted messages.
      
      Smoothr orders come from dean & david (D&D App + Lieferando).
      Converts plain text Smoothr message into standard MDG-ORD + RG-SUM format.
      
      Args:
          smoothr_data: Parsed Smoothr order data from parse_smoothr_order()
      """
      from utils import build_status_lines
      
      order_id = smoothr_data["order_id"]
      order_num = smoothr_data["order_num"]
      order_type = smoothr_data["order_type"]
      
      logger.info(f"Processing Smoothr order {order_id} ({order_type})")
      
      # Vendor is always "dean & david" for Smoothr orders
      vendor = "dean & david"
      vendor_shortcut = RESTAURANT_SHORTCUTS.get(vendor, vendor)
      
      # Create STATE entry
      STATE[order_id] = {
          "order_id": order_id,
          "name": order_num,  # Just the display number (e.g., "500" or "TD")
          "order_type": order_type,  # "smoothr_dnd" or "smoothr_lieferando"
          "vendors": [vendor],
          "vendor_items": {},  # No products yet
          "customer": smoothr_data["customer"],
          "total": None,  # Not available
          "tips": None,  # Not available


