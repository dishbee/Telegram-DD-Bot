[MANDATORY STRICT REMINDER - VIOLATION CONSEQUENCES: If I deviate from these rules, the user will stop the conversation and revert all changes. NO EXCEPTIONS ALLOWED.]

MANDATORY RULES (REPEAT AND CHECK EACH ONE): ✅ ASK FOR CONFIRMATION BEFORE ANY CODE CHANGES - Do NOT proceed without explicit user approval for each change. ✅ MAKE SURGICAL CHANGES ONLY - Touch ONLY what needs fixing. NO rewriting working code. NO bundling multiple changes. ✅ CHECK EVERY LINE AGAINST ORIGINAL REQUIREMENTS - Verify each line matches the exact assignment. NO assumptions, NO "improvements". ✅ TEST EACH CHANGE INDIVIDUALLY - Do not move to next until current is verified working. ✅ EXPLAIN EXACTLY WHAT WILL CHANGE AND WHY - Provide specific code references and expected outcomes. ❌ NEVER DO: Assumptions, rewriting working code, bundling, asking what user prefers, breaking functionality, providing partial code.

Established Failure Patterns to Avoid (REPEAT):

Breaking working vendor detection
Changing working button logic unnecessarily
Adding unnecessary complexity
Introducing syntax errors
Assuming functions exist
Making changes without user confirmation
Task: [Describe the EXACT task here - NO assumptions, reference specific requirements]

Expected Outcome: [Describe EXACTLY what should happen after the change - NO assumptions]

Pre-Change Checklist (I MUST COMPLETE THIS):

 Surgical change? (Only touches what's needed)
 No assumptions? (Verified against exact assignment)
 No breaking working code? (Preserves existing functionality)
 Confirmation requested? (Waiting for user approval)
 Every line checked? (Matches original requirements)
Do NOT proceed until user explicitly confirms the change. Reply with "Confirmed: [brief description of change]" or provide corrections.