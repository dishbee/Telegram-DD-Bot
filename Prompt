[MANDATORY STRICT REMINDER - VIOLATION CONSEQUENCES: If I deviate from these rules, the user will stop the conversation and revert all changes. NO EXCEPTIONS ALLOWED.]

MANDATORY RULES (REPEAT AND CHECK EACH ONE): ‚úÖ ASK FOR CONFIRMATION BEFORE ANY CODE CHANGES - Do NOT proceed without explicit user approval for each change. ‚úÖ MAKE SURGICAL CHANGES ONLY - Touch ONLY what needs fixing. NO rewriting working code. NO bundling multiple changes. ‚úÖ CHECK EVERY LINE AGAINST ORIGINAL REQUIREMENTS - Verify each line matches the exact assignment. NO assumptions, NO "improvements". ‚úÖ TEST EACH CHANGE INDIVIDUALLY - Do not move to next until current is verified working. ‚úÖ EXPLAIN EXACTLY WHAT WILL CHANGE AND WHY - Provide specific code references and expected outcomes. ‚ùå NEVER DO: Assumptions, rewriting working code, bundling, asking what user prefers, breaking functionality, providing partial code, deterioate from the assignment (even slightly).

Established Failure Patterns to Avoid (REPEAT):

Breaking working vendor detection
Changing working button logic unnecessarily
Adding unnecessary complexity
Introducing syntax errors
Assuming functions exist
Making changes without user confirmation

Task: Order Assignment System Implementation Prompt (UPC Section)

Expected Outcome: Overview
Implement the Order Assignment System for the Telegram Dispatch Bot's UPC (User Private Chats) section. This system activates only after ALL vendors in a multi-vendor order have confirmed their preparation times (or immediately for single-vendor orders). It allows MDG members to assign orders to themselves or others, sending detailed assignment messages to private chats with CTA buttons for delivery coordination.

Core Requirements
1. Assignment Trigger
Activation: System triggers when the last vendor confirms time (via "Works üëç", "Later at", or "Will prepare at").
MDG Confirmation Message: Send a status message to MDG: "{vendor} replied: Works üëç" (or equivalent for other responses).
Assignment Buttons: Add "üëà Assign to myself" and "üëâ Assign to..." buttons ONLY below this confirmation message. The keyboard below the first MDG order message remains the same.
Multi-Vendor Handling: Wait for ALL vendors to confirm before showing assignment buttons. Track confirmations per vendor in order state.
2. Assignment Message Format (Sent to Private Chat)
Send the assignment message to the selected user's private chat. Format must match exactly:

Format Rules:

Title: "üîñ #{order_number} - dishbee" (no vendor shortcuts).
Vendor Lines: For each vendor, "üè† {vendor_name}: {confirmed_time} üì¶ {total_quantity}".
For multi-vendor: Include ALL vendors with their confirmed times.
For single-vendor: Include only that vendor.
Customer Name: "üë§ {full_name}".
Address: "üî∫ {street} ({zip})" (no link).
Tips: "‚ùï Tip: {amount}‚Ç¨" (only if > 0).
Cash Payment: "‚ùï Cash on delivery: {total}‚Ç¨" (only for CoD orders).
Phone: "üìû {phone_number}" (no link).
3. CTA Buttons in Assignment Message
Always display these buttons below the assignment message:

‚òéÔ∏è Call customer
Function: Trigger immediate phone call via carrier (not Telegram).
Implementation: Use tel: link to open dialer.
Behavior: Direct call, no intermediate steps.
üß≠ Navigate
Function: Open Google Maps with navigation by cycling.
Implementation: Use URL: https://www.google.com/maps/dir/?api=1&destination={original_address}&travelmode=bicycling.
Behavior: Opens navigation app directly.
‚è∞ Delay
Function: Handle delivery delays.
Sub-options: Show 4 buttons based on confirmed time + 5/10/15/20 mins (displayed as actual times, e.g., "12:20, 12:25, 12:30, 12:35").
Action: Send message to related restaurant group: "We have a delay, if possible prepare #{order} at {new_time}. If not, please keep it warm."
Restaurant Response: Show same buttons as regular time requests ("Works üëç", "Later at...").
Completion: When restaurant responds, send update to MDG.
üçΩ Call {Vendor}
Function: Call restaurant's Telegram account (placeholder for future).
Implementation: Prepare code for future addition (no actual calling yet).
Behavior: Button ready for implementation.
‚úÖ Delivered
Function: Mark order as completed.
Actions:
Send completion message to MDG: "Order #{order} was delivered."
Update original MDG order message status to "‚úÖ Delivered".
Save delivery status to order state.
Behavior: Final action that closes the order workflow.

Technical Implementation Details
State Management
Extend Order State: Add confirmed_times as dict (vendor ‚Üí time) for multi-vendor tracking.
Assignment Tracking: Store assigned user ID and assignment message ID.
Cleanup Logic: Auto-delete status messages after 15 seconds, except the assignment confirmation message (delete only after "‚úÖ Delivered").

User Management
COURIER_MAP: Use for user IDs of known couriers (Bee 1, Bee 2, Bee 3).
MDG Members: Fetch current MDG members dynamically. Prioritize COURIER_MAP users in "Assign to..." list.
Private Chat Check: Before sending assignment message, verify if user has started a private chat with the bot. If not, show error: "Please start a private chat with the bot first."

Assignment to Self: Use cq["from"]["id"] from callback query.

Multi-Vendor Handling
Confirmed Times: Store per-vendor times in confirmed_times dict.
Assignment Message: Include all vendors' confirmed times and quantities.
Delay Flow: For multi-vendor, show vendor-specific buttons (e.g., "Request JS", "Request LR") in delay submenu. After click - show "Sub-options: Show 4, buttons..." same like for one-vendor orders.

Integration Points
Hook into RG Confirmation: After vendor confirms time, check if ALL vendors have confirmed. If yes, add assignment buttons to MDG confirmation message.

UPC Section: Add new functions for assignment logic, message building, and CTA handling.
Existing Functions: Reuse safe_send_message, build_mdg_dispatch_text, and cleanup logic.
Webhook Handling: Add new callback actions for assignment buttons and CTA buttons.

Error Handling
Missing User Chat: Show error if user hasn't started private chat.
Invalid Data: Graceful fallback for missing confirmed times or user IDs.
Multi-Vendor Edge Cases: Handle orders with no confirmed times or partial confirmations.

Expected Behavior Flow
Vendor Confirmations: Track each vendor's confirmation in order state.
All Confirmed: When last vendor confirms, send MDG status message with assignment buttons.

Assignment Selection: User clicks "Assign to myself" or selects from MDG members list.
Private Message: Send formatted assignment message to selected user's private chat.
CTA Interactions: Handle call, navigate, delay, restaurant call, and delivered actions.
Delay Subflow: Send delay request to vendor, handle response, update MDG.
Completion: Mark order delivered, update MDG, clean up messages.
Constraints & Best Practices
Surgical Changes: Touch ONLY UPC-related code; preserve MDG/RG workflows.
Code Organization: Add to UPC section; use existing patterns and naming.
Dependencies: Ensure no breaking changes to STATE, webhooks, or existing buttons.
Testing: Verify with single-vendor and multi-vendor orders; test all CTA buttons.
Logging: Add detailed logs for assignment actions and errors.
Success Criteria
Assignment system activates only after all vendors confirm.
Assignment messages sent correctly to private chats with proper formatting.
All CTA buttons function as specified (call, navigate, delay, etc.).
Proper state management and cleanup (15-second auto-delete for status messages).
No breaking changes to existing MDG/RG functionality.
Ready for production deployment with full multi-vendor support.
Implement this system by extending the existing main.py code with the required UPC functionality. Ensure all changes are confirmed before deployment.





Pre-Change Checklist (I MUST COMPLETE THIS):

 Surgical change? (Only touches what's needed)
 
 No assumptions? (Verified against exact assignment)
 No breaking working code? (Preserves existing functionality)
 Confirmation requested? (Waiting for user approval)
 Every line checked? (Matches original requirements)

 If something still needs clarification - ask questions.

 Break down the whole assigmnet into smaller tasks / phases. And do them one by one maintaining the flawless workflow.

Proceed if all from the above is understood and only if there is certainty that I will exactly 100% follow the assignemnt. 

I want you to refactor the code as folows into 3 main sections. Recognize and define the parts of code that are related to each section. Analyze all the workflow and dependencies of the code. Refactor the code the way that you will understand when given editing tasks.

1. Main dispatching group where orders initially arrive - MDG
2. Restaurants (vendors) groups where orders also initally arrive, but in different format ‚Üí RG
3. Users (admins / workers) interacting with dishbee BOT in the private chats ‚Üí UC ‚Üí THIS IS JUST A PLACEHOLDER FOR NOW, KEEP IT READY (EMPTY) FOR FURTHER ASSIGNMENT SYSTEM IMPLEMENTATION

The main goal is for you to understand the main workflow logic:

Order is placed ‚Üí arrives in MDG and RG ‚Üí user (worker / admin) requests the time from restaurants ‚Üí restaurants confirm time ‚Üí user recieves this information in MDG ‚Üí assigns it to himself or to another user (private chat with BOT) ‚Üí order is delivered ‚Üí user conifrms delivery ‚Üí order is state is changed to delivered

This logic is base, but of course it has many variables and side functions that are being continiously implemented. The main goal here is that when those are being implemented so that you understand the baseline and dont break the logic / dependencies and workflows.


[MANDATORY STRICT REMINDER - VIOLATION CONSEQUENCES: If I deviate from these rules, the user will stop the conversation and revert all changes. NO EXCEPTIONS ALLOWED.]

MANDATORY RULES (REPEAT AND CHECK EACH ONE): ‚úÖ ASK FOR CONFIRMATION BEFORE ANY CODE CHANGES - Do NOT proceed without explicit user approval for each change. ‚úÖ MAKE SURGICAL CHANGES ONLY - Touch ONLY what needs fixing. NO rewriting working code. NO bundling multiple changes. ‚úÖ CHECK EVERY LINE AGAINST ORIGINAL REQUIREMENTS - Verify each line matches the exact assignment. NO assumptions, NO "improvements". ‚úÖ TEST EACH CHANGE INDIVIDUALLY - Do not move to next until current is verified working. ‚úÖ EXPLAIN EXACTLY WHAT WILL CHANGE AND WHY - Provide specific code references and expected outcomes. ‚ùå NEVER DO: Assumptions, rewriting working code, bundling, asking what user prefers, breaking functionality, providing partial code, deterioate from the assignment (even slightly).

Established Failure Patterns to Avoid (REPEAT):

Breaking working vendor detection
Changing working button logic unnecessarily
Adding unnecessary complexity
Introducing syntax errors
Assuming functions exist
Making changes without user confirmation

AND BEFORE YOU DO ANYTHING YOU NEED TO RECONFIRM, THAT THE USER ASSIGNMENT SYSTEM WILL NOT BE IMPLEMENTED DURING THIS REFACTORING. THAT THE FILE WILL BE JUST A PLACEHOLDER.
